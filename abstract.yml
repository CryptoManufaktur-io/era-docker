# Abstract is just different enough from Era that a separate yml makes sense
x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  era-node:
    restart: "unless-stopped"
    image: matterlabs/external-node:${NODE_DOCKER_TAG}
    stop_grace_period: 5m
    stop_signal: SIGINT
    environment: # The node is configured entirely via ENV variables
      - DATABASE_URL=postgres://postgres:postgres@${SQL_NODE}/eranode
      - DATABASE_POOL_SIZE=10
      - EN_STATE_CACHE_PATH=/db/state_keeper
      - EN_MERKLE_TREE_PATH=/db/lightweight
      - EN_ETH_CLIENT_URL=${L1_RPC}
      - EN_MAIN_NODE_URL=${MAIN_NODE_URL}
      - EN_L2_CHAIN_ID=${L2_CHAIN_ID}
      - EN_L1_CHAIN_ID=${L1_CHAIN_ID}
      - EN_HTTP_PORT=${RPC_PORT:-3060}
      - EN_WS_PORT=${WS_PORT:-3061}
# Comment this out if not collecting metrics, to avoid memory leak
      - EN_PROMETHEUS_PORT=${METRICS_PORT:-3322}
      - EN_HEALTHCHECK_PORT=3081
      - EN_PRUNING_ENABLED=true
      - EN_SNAPSHOTS_RECOVERY_ENABLED=true
      - EN_SNAPSHOTS_OBJECT_STORE_BUCKET_BASE_URL=raas-abstract-mainnet-external-node-snapshots
      - EN_SNAPSHOTS_OBJECT_STORE_MODE=GCSAnonymousReadOnly
      - EN_GAS_PRICE_SCALE_FACTOR=1.5
      - EN_ESTIMATE_GAS_SCALE_FACTOR=1.3
      - EN_ESTIMATE_GAS_ACCEPTABLE_OVERESTIMATION=5000
      - RUST_LOG=${RUST_LOG}
    volumes:
      - node-data:/db
      - /etc/localtime:/etc/localtime:ro
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST:-abstract}.service=${RPC_HOST:-abstract}
      - traefik.http.routers.${RPC_HOST:-abstract}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-abstract}.rule=Host(`${RPC_HOST:-abstract}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-abstract}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST:-abstract}lb.service=${RPC_HOST:-abstract}
      - traefik.http.routers.${RPC_HOST:-abstract}lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-abstract}lb.rule=Host(`${RPC_LB:-abstract-lb}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST:-abstract}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-abstract}.loadbalancer.server.port=${RPC_PORT:-3060}
      - traefik.http.routers.${WS_HOST:-abstractws}.service=${WS_HOST:-abstractws}
      - traefik.http.routers.${WS_HOST:-abstractws}.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-abstractws}.rule=Host(`${WS_HOST:-abstractws}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-abstractws}.tls.certresolver=letsencrypt
      - traefik.http.routers.${WS_HOST:-abstractws}lb.service=${WS_HOST:-abstractws}
      - traefik.http.routers.${WS_HOST:-abstractws}lb.entrypoints=websecure
      - traefik.http.routers.${WS_HOST:-abstractws}lb.rule=Host(`${WS_LB:-abstractws-lb}.${DOMAIN}`)
      - traefik.http.routers.${WS_HOST:-abstractws}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${WS_HOST:-abstractws}.loadbalancer.server.port=${WS_PORT:-3061}
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=${METRICS_PORT:-}
      - metrics.network=abstract-l2-${L2_CHAIN_ID}-l1-${L1_CHAIN_ID}

volumes:
  node-data:
